----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ Eclipse 단축키 ]

    Eclipse 단축키 확인 및 변경
    Eclipse의 모든 단축키는 Window >> Preferences >> Workbench >> Keys 메뉴에서 확인 및 변경이 가능하다.
    그 동안 다른 툴에서 자신의 손에 익숙한 단축키들이 있다면 이 메뉴에서 단축키들을 변경하는 것이 가능하다.

    Java Editor 단축키

        Ctrl + Shift + M    : 특정 클래스 Import 시키기
        Ctrl + Shift + O    : 자동으로 Import 시키기
        Ctrl + Shift + F    : 코드 자동 정리
        Ctrl + Shift + G    : 특정 메써드나 필드를 Reference하고 있는 곳을 찾는다.
        Ctrl + 1            : Quick Fix. 에러가 발생했을 경우 Quick Fix를 통해 쉽게 해결이 가능하다.
        Ctrl + Shift + /    : 블럭 주석 설정
        Alt + Shift + UP    : 커서를 기준으로 토큰단위 블럭지정
        Alt + Shift + DOWN  : 커서를 기준으로 토큰단위 블럭해제
        CTRL + L            : 특정 줄번호로 가기
        Alt + Shift + J     : 자동으로 주석 달기 (메소드나 멤버변수에 포커스 두고 실행)

    Window 이동

        F10                 : 메뉴창을 활성화
        Ctrl + F8           : 다음 Perspective로 이동
        Ctrl + N            : 새로운 파일 및 프로젝트 생성.
        Ctrl + Shift + Down : Java Editor에서 다음 member로 이동.
        Ctrl + F7           : 다음 View로 이동.
        Ctrl + Shift + F7   : 이전 View로 이동.
        Alt + <-            : 이전 작업 화면
        Alt + ->            : 다음 작업 화면
        F12                 : 컴파일 중 에러등으로 포커스가 다른데로 갔을 때 Editor 로 커서 이동
        Ctrl + 1            : 컴파일 에러가 발생한 곳에서 Ctrl + 1을 누를 경우 컴파일 에러에 대한 해결책을 제시

    디버깅 단축키

        CTRL + Shift + B    : 현 커서의 위치에 브레이크 포인터 설정/해제
        F11                 : 디버깅 시작
        F8                  : 디버깅 계속
        F6                  : 한줄씩 실행(Step Over)
        F5                  : 한줄씩 실행하되 함수일 경우 그 함수 내부로 들어감(Step Into)
        CTRL + R            : 현재 라인까지 실행(Run to Line)

    Refactoring 단축키

        Shift + ALT + 알파벳 : Refactoring을 위한 단축키 임.

    RUN 단축키

        Ctrl + F11 : 이전에 실행되었던 Run파일 실행.

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ 유용한 TIP ] 이클립스 - 단축키

    보기시 전에 필요하신것만 ctrl + f 하셔서 봅시다 많아요ㅎㅎ;

    1) 코딩을 할 때 라인 번호가 있어야 편하다.

        워크벤치 > 에디터 > 텍스트 에디터 > 쇼라인넘버즈
        어플라이 하면 된다.

    2) 코드 스타일 바꾸기

        Windows > Prefrences >
        Java > Code Style > Formatter
        하나를 만들어서 그거 이용하도록
        에디터에서 적용방법 : Ctrl + Shift + F 또는 Source > Format
        특정부분만 적용하려면 블록 후 Ctrl + Shift + F

    3) 퍼스펙티스 설정 저장

        WIndow > Save Perspective As

    4) 코드 어시스트 Ctrl + Space

        for, while 자동완성
        sysout 자동완성
        템플릿 설정은 Preferences
        Java > Editor > Templates
        Actio 정도만 치고 Ctrl+Space를 치면 적당한 후보를 내줍니다.
        요것도 여러번 연습해서 습관이 되도록 하셔야겠지요.
        for(int i = 0; i < array.length; i++)
        이거 치기 참 힘드시죠?
        for만 치시고 ctrl+space 누르시면
        슈루룩 완성이 됩니다.
        중간에 바꿔야 할건 tab키를 이용하면 바꿀 수 있고요.

    5) Quick fix

        에러난 줄에 노란전구가 있으면 Ctrl + 1 눌러서 방법중 하나 고르면 수정된다.
        빨간 줄이 보이세요? 커서를 올려놓고 기다려보세요.
        올려놓고 기다리시면 왜 빨간줄이 나왔는지 나옵니다.
        도대체 어떻게 고쳐야할지 모르겠다 싶으시면
        한번 Ctrl+1을 눌러보세요. 알아서 고쳐줄지도 모릅니다.
        (안고쳐줄때도 많긴 합니다만, 편할때도 많습니다^^)

    6) Quick Type Hierarchy

        메서드, 타입, 패키지를 선택하고 Ctrl + T
        한번 더 누르면 뒤집어짐

    7) Quick Outline

        Ctrl + 0 키를 누르면 바로 필터링됨

    8) 소스 코드 네비게이션

        정의로 바로가기 : F3
        다시 돌아오기 : Alt + <- , 다시 정의보기 : Alt + ->
        Ctrl 누르고 있으면 각 요소가 하이퍼링크 모양으로 바뀜 : 이때 마우스 클릭시 이동
        해당라인 이동 : Ctrl + L

    9) Mark Occurences

        툴바버튼이 눌려있으면 커서가 위치한 요소는 사용처가 다 보임

    10) getter, setter, 생성자

        소스에서 Source > 해서 선택

    11) 소스비교

        우클릭 > Compare with > Local History
        Replace With > Local History
        Restore from Local HIstory

    12) 에디터간 이동

        많아지면 오른쪽 >> 클릭
        Ctrl + F6 :

    13) 뷰 간 이동

        Ctrl + F7

    14) 퍼스펙티브간 이동

        Ctrl + F8

    15) 에디터로 돌아오기

        어디에 있든 F12

    16) 찾기

        점증적찾기 : Ctrl + J (아래에 Incremental File표시)
        그리고 단어입력
        그리고 Ctrl + J 클릭시 다음단어 찾음 (Ctrl + Shift + J는 반대)
        블록선택후 Ctrl + K 클릭시 다음단어
        검색기능
        일반 검색 : Ctrl + F
        마우스로 드레그한 항목 아래로 검색 : Ctrl + K
        마우스로 드레그한 항목 위로 검색 : Ctrl + Shift + K
        실시간 타이핑 검색 (아래로) : Ctrl + J
        실시간 타이핑 검색 (위로) : Ctrl + Shift + J

    17)  소스편집

        원하는 라인으로 이동 : Ctrl + L
        한 라인 삭제 : Ctrl + D
        주석처리 : Ctrl + Shift + /     --->   형태 :
                        Ctrl + /    ----> 형태 : //
        자동 들여쓰기 정리 : Ctrl + I
        자동으로 임포트하기 : Ctrl + Shift + O
        소스창 전체화면 전환 : Ctrl + M
        System.out.println(); 간단하게 입력하기 : sysout 입력 후 Ctrl + Space
        try { } catch { } 간단하게 입력하기 : try 입력 후 Ctrl + Space
        for문 간단하게 입력하기 : for 입력 후 Ctrl + Space
        열린파일 이동할때 리스트 항목을 보고 선택하기 : Ctrl + F6
        Ctrl  +  Shift  +  O  -  Organize  Imports
        저장전에는  필히  import  구문을  정리  해주시고..
        Ctrl  +  Shift  +  F  -  Reformat  source
        저장전  소스  들여쓰기도  자동으로  정리해주시고
        Alt  +  Shift  +  J  -  Java  Doc  Comment  Create
        아직도  Java  Doc을  안다는가..  달어줘라  개발자의  센스다.  일일히  타이핑  하는가..
        이젠  이단축키  하나로..  메소드나  클래스  명에  위치시키고  눌러봐라.  파라미터,  throws를  분석하여  친절하게  Doc주석을  달어준다.
        --------------------------------------------------------------------------------
        1. 옮길 문장이 있는 줄을 아무데나 클릭한다.
        2. Alt키와 화살표(위로)키를 누른다.
        --------------------------------------------------------------------------------

    18) 리펙토링

        1. Source 메뉴에는 재미있는 기능이 많습니다.
        - source =>Generate Getter and Setter를 보시면
        그동안 여러분을 괴롭혔던 mutator와 accessor를 편하게 구현하실 방법이 들어있습니다.
        - source => Generate Constructors using Fields에서는
        class variable만 선언하면 constructor가 자동으로 만들어지게 해줍니다.

        ALT + SHIFT + Z = 블록설정 후 try-catch 문 덮어서 만들어주기

    19) 디버깅

        2. 버그가 있으십니까? 디버깅을 해보세요. (고급기능, 그러나 유용한 기능)
        Ctrl+Shift+B를 누르면 breakpoint가 걸리고,
        F11을 누르면 디버그 모드로 실행이 됩니다.
        디버그 모드에서는 breakpoint의 위치에서 어떤 변수가 어떤 값을 가지는지 볼 수 있고요,
        한줄 한줄 실행해가며(보통 F6, 함수로 들어갈때 F5) 볼 수도 있고요.
        디버깅에 대한 건 자세히 가면 책 한권정도 분량도 나오는데
        기본적인 건 당연한 것들이 많아서 혼자 해보다 보면 스스로 많은 교훈을 얻으실 수 있습니다.
        (자세한 도움이 필요하시면 메일을 보내시던지 주변에 물어보시고요 ^^)
        아. 디버깅을 하시다보면 perspective(창의 배치)가 달라집니다.
        이때 디버깅을 마치고 돌아오시려면 오른쪽 위에 Debug / Java라고 쓰인 곳에 가셔서 Java를 눌러주세요.

    20) 주석처리

        Ctrl  +  Shift  +  /  -  instantly  toggling  comments
        소스를  일일히  주석처리  하는가.  블로  주석이라면  마우스로  긁어서  한번에  주석처리  하자.

    21) 기타

        Alt  +Shift  +  T  -  Show  Refactor  Quick  Menu
        팝업에  Refactor  선택에  명령어  수행  너무많은  시간이  소비된다.  한번에  단축키로  호출하자

    22) 단축키호출

        Ctrl  +  Shift  +  L  -  Hotkeys  Table  Call
        이클립스의  핫키  목록을  볼수있는  핫키
        Eclipse 단축키 확인 및 변경
        Eclipse의 모든 단축키는 Window >> Preferences >> Workbench >> Keys 메뉴에서 확인 및 변경이 가능하다. 그 동안 다른 툴에서 자신의 손에 익숙한 단축키들이 있다면 이 메뉴에서 단축키들을 변경하는 것이 가능하다.
        Java Editor 단축키
        Ctrl + Shift + M : 캐럿이 위치한 대상에 필요한 특정 클래스 Import 시키기
        Ctrl + Shift + O : 소스에 필요한 패키지를 자동으로 Import 시키기
        Ctrl + Shift + F : 소스코드 자동 정리
        Ctrl + Shift + G : 특정 메써드나 필드를 Reference하고 있는 곳을 찾는다.
        Ctrl + Shift + K : 이전찾기 (또는, 찾고자하는 문자열을 블럭으로 설정한 후 역으로 찾고자 하는 문자열을 찾아감.)
        Ctrl + shift + G : 특정 메써드나 필드를 참조하고 있는 곳을 찾는다.
        Ctrl + shift + B : 현재커서위치에 Break point설정/해제
        Ctrl + 1 : Quick Fix. 에러가 발생했을 경우 Quick Fix를 통해 쉽게 해결이 가능하다.(Rename에 주로 사용)
        Ctrl + 2 + R : Rename (리팩토링)
        Ctrl + Shift + / : 선택 영역 Block Comment 설정
        Ctrl + Shift + : 선택 영역 Block Comment 제거
        Ctrl + / : 한줄 또는 선택영역 주석처리 / 제거
        Ctrl + S : 저장 및 컴파일
        Ctrl + I : 소스 깔끔 정리(인덴트 중심의 자동구문정리)
        Ctrl + space : 어휘의 자동완성(Content Assistance)
        Ctrl + Q : 마지막 편집위치로 가기
        Ctrl + L : 특정줄번호로 가기
        Ctrl + D : 한줄삭제
        Ctrl + O : Outline 창 열기
        Ctrl + H : Find 및 Replace
        Ctrl + K : 다음찾기(또는, 찾고자 하는 문자열을 블럭으로 설정한 후 키를 누른다.)
        Ctrl + N : 새로운 파일 및 프로젝트 생성
        Ctrl + Shift + S : 열려진 모든파일 저장 및 컴파일
        Ctrl + 객체클릭(혹은 F3) : 클래스나 메소드 혹은 멤버를 정의한 곳으로 이동(Open Declaration)
        Alt + Shift + UP : 커서를 기준으로 토큰단위 블럭지정 (괄호의 열고 닫기 쌍 확인에 유용)  ==> 괄호의 뒤에 마우스 커서를 위치시킨 후 더블클릭한 것과 같은 효과
        Alt + Shift + DOWN : 커서를 기준으로 토큰단위 블럭해제
        Alt + Shift + J : 설정해 둔 기본주석을 자동으로 달기 (메소드나 멤버변수에 포커스 두고 실행)
        Alt + / : Word Completion
        Alt + Shift + R : Rename
        Alt + ->, Alt + <- : 이후, 이전
        해당 프로젝트에서 Alt + Enter : Project 속성
        sysout > Ctrl + Space : System.out.println();
        try > Ctrl + Space : 기본 try-catch문 완성
        for > Ctrl + Space : 기본 for문 완성
        템플릿을 수정,추가 : Preferences > java > editor > Templates
        Ctrl + Alt + R
        Ctrl + F11 : 실행
        F11 : 디버깅 시작
        F5 : step into
        F6 : step over
        F8 : 디버깅 계속
        Ctrl + .


    23) 에러위치로 이동

        Ctrl + '.'

    24) 키보드로 코드블럭 이동

        Alt + 위 화살표 혹은 아래 화살표

    25) 나의 포맷 적용

        Ctrl + Shift + 'F'


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

M:\PROG\eclipse-java-luna-SR2-win32-x86_64\eclipse.exe
    -vm           "M:\PROG\jdk1.8.0_51\bin\javaw.exe"
    -data         "M:\WORK\workspaceluna"
    -showlocation "최종정리2차_java_luna"
    -nl            ko_KR

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------




static 함수에서 자기 자신 클래스 명 알아내기
=> 오브젝트 배열을 하나 만들어서 그걸 품고(enclosing)하고 있는 클래스가 자기 자신이다.


    1. System.out.println(">" + new Object(){}.getClass().getEnclosingClass().getName());

    2. System.out.println(">" + this.getClass().getName());

    3. System.out.println(">" + this.getName()); // print thread name


[출처] static 함수에서 자기 자신 클래스 명 알아내기|작성자 캐나다여행



----------------------------------------------------------------------------------------------------

    <?xml version="1.0" encoding="UTF-8"?>
    <classpath>
        <classpathentry kind="src" path="src"/>
        <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
        <classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/KANG01_libs"/>
        <classpathentry kind="output" path="bin"/>
    </classpath>

    ant.jar
    commons-net-3.3.jar
    log4j-1.2.17.jar

----------------------------------------------------------------------------------------------------

You have a choice -> Window > Preferences > type filter text : encod

 * General > Content Types
 * General > Workspace > Text file encoding : EUC-KR, New text file line delimiter : unix

You have to set Preferences > Java > Code Style > Code Templates > Import : codetemplates_20160201.xml

You have to set Preferences > General > Appearance > Colors and Fonts

	Text Editor Block Selection Font  : 굴림체-9
	Text Font                         : 굴림체-9

You have to set Preferences > Java > Editor > Content Assist > Syntax Coloring     To Good Viewer

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ eclipse java 자동 주석 ]

    1. 세팅하기
        Window >  Preferences > C/C++ > Code Style > Code Templates
        Comments 하부의 Files, Types, Fields, Methods, Constructors, Destructors
        각 항목을 선택하여 Edit 버튼 클릭하여 원하는 형태로 구성 가능

    2. 주석 사용하기 (shift + ALT + J )
        클래스 생성시 생성 화면 맨 아래에 [주석생성] 체크 박스가 있습니다. 체크하고 [완료]버튼 클릭하면 파일주석이 생성됩니다.
        클래스와 메소드주석은 클래스나 메소드명이 있는 라인에서 마우스 R-버튼 클릭 후 [소스]-[요소주석생성]을 클릭하면 주석이 자동 생성됩니다.

    3. 파일 주석 사용하기
        파일 주석은 단축키를 사용하지 않고 파일 생성 시 templete 를 선정하여 초기 설정 되도록 한다.

    4. Comments 항목 설정 예시
        ${} 내용설명

        date : Current date
        dollar : The dollar symbol
        enclosing_type : The type enclosing the method
        file_name : Name of the enclosing compilation
        package_name : Name of the enclosing package
        project_name : Name of the enclosing project
        tags : Generated Javadoc tags (@params, @return...)
        time : Current time
        todo : Todo task tag
        type_name : Name of the current type
        user : user name
        year : current year


        [Files]
            /**
            * 0. Project  : XXXX 프로젝트
            *
            * 1. FileName : ${file_name}
            * 2. Package : ${package_name}
            * 3. Comment :
            * 4. 작성자  : ${user}
            * 5. 작성일  : ${date} ${time}
            * 6. 변경이력 :
            *                    이름     : 일자          : 근거자료   : 변경내용
            *                   ------------------
            *                    ${user} : ${date} :            : 신규 개발.
            */

            /**
             * Copyright 2014, 2015, 2016. TAIN, Inc. all rights reserved.
             *
             * Licensed under the GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *      http://www.gnu.org/licenses/
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             *
             * -----------------------------------------------------------------
             * Copyright 2014, 2015 TAIN, Inc.
             */

            /**
             *
             * Copyright 2009 the original author or authors.
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *      http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             *
             */

            /**
             * Copyright 2016 the original author or authors.
             *
             * Licensed under the GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *      http://www.gnu.org/licenses/
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             *
             * -----------------------------------------------------------------
             *
             * Code Templates > Comments > Files
             *
             * 1. Project    : Tools check project
             * 2. FileName   : ${file_name}
             * 3. Package    : ${package_name}
             * 4. Comment    :
             * 5. Author     : ${user}
             * 6. First Date : ${date} ${time}
             * 7. History
             *     ${user} : ${date} :
             *
             */

        [Class]
            /**
            * <PRE>
            * 1. ClassName : ${enclosing_type}
            * 2. FileName  : ${file_name}
            * 3. Package  : ${package_name}
            * 4. Comment  :
            * 5. 작성자   : ${user}
            * 6. 작성일   : ${date} ${time}
            * </PRE>
            */

            /**
             * Code Templates > Comments > Types
             *
             * <PRE>
             *   1. ClassName  : ${enclosing_type}
             *   2. FileName   : ${file_name}
             *   3. Package    : ${package_name}
             *   4. Comment    :
             *   5. Author     : ${user}
             *   6. First Date : ${date} ${time}
             * </PRE>
             *
             * @author ${user}
             *
             * ${tags}
             */

        [Constructors]
            /**
            * <PRE>
            * 1. MethodName : ${enclosing_type}
            * 2. ClassName  : ${enclosing_type}
            * 3. Comment   :
            * 4. 작성자    : ${user}
            * 5. 작성일    : ${date} ${time}
            * </PRE>
            *   ${tags}
            */

            /**
             * Code Templates > Comments > Constructors
             *
             * <PRE>
             *   1. MethodName : ${enclosing_type}
             *   2. ClassName  : ${enclosing_type}
             *   3. Comment    :
             *   4. Author     : ${user}
             *   5. First Date : ${date} ${time}
             * </PRE>
             *
             * ${tags}
             */

        [Method]
            /**
            * <PRE>
            * 1. MethodName : ${enclosing_method}
            * 2. ClassName  : ${enclosing_type}
            * 3. Comment   :
            * 4. 작성자    : ${user}
            * 5. 작성일    : ${date} ${time}
            * </PRE>
            *   @return ${return_type}
            *   ${tags}
            */

            /**
             * Code Templates > Comments > Constructors
             *
             * <PRE>
             *   1. MethodName : ${enclosing_method}
             *   2. ClassName  : ${enclosing_type}
             *   3. Comment    :
             *   4. Author     : ${user}
             *   5. First Date : ${date} ${time}
             * </PRE>
             *
             * ${tags}
             */



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
